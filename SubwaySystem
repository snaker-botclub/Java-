package model;

import java.io.*;
import java.util.*;

public class SubwaySystem {
    private Map<String, Station> stations;
    private Map<String, Line> lines;

    public SubwaySystem() {
        stations = new HashMap<>();
        lines = new HashMap<>();
    }

    public void loadSubwayData(String filename) {
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split("\t");
                String lineName = data[0];
                String start = data[1];
                String end = data[2];
                int distance = Integer.parseInt(data[3]);

                lines.putIfAbsent(lineName, new Line(lineName));
                lines.get(lineName).addConnection(start, end, distance);

                stations.putIfAbsent(start, new Station(start));
                stations.putIfAbsent(end, new Station(end));
                stations.get(start).addLine(lineName);
                stations.get(end).addLine(lineName);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public Set<String> getTransferStations() {
        Set<String> transferStations = new HashSet<>();
        for (Station station : stations.values()) {
            if (station.getLines().size() > 1) {
                transferStations.add(station.toString());
            }
        }
        return transferStations;
    }

    public List<String> getNearbyStations(String stationName, int n) {
        List<String> nearbyStations = new ArrayList<>();
        // Implement the logic to get nearby stations
        return nearbyStations;
    }

    public List<List<String>> getAllPaths(String start, String end) {
        List<List<String>> paths = new ArrayList<>();
        // Implement the logic to get all paths
        return paths;
    }

    public List<String> getShortestPath(String start, String end) {
        List<String> path = new ArrayList<>();
        // Implement the logic to get the shortest path
        return path;
    }

    public int calculateFare(List<String> path) {
        int fare = 0;
        // Implement the logic to calculate fare
        return fare;
    }

    public int calculateDiscountFare(List<String> path, boolean useWuhanTong, int days) {
        int fare = 0;
        // Implement the logic to calculate discounted fare
        return fare;
    }
}
